function parsir(e,t,n){var s=t||document.createElement("div");for(var i in e){var o=e[i].dom=e[i].dom||document.createElement(e[i].type||"div");for(var r in e[i].properties)o[r]=e[i].properties[r];for(var c in e[i].attributes)o.setAttribute(c,e[i].attributes[c]);for(var a in e[i].events)o.addEventListener(a,e[i].events[a]);s.appendChild(parsir(e[i].childs,o,n))}return s.scene=n,s}function Scene(e,t){Drawing.apply(this,arguments),this.wrap=document.createElement("div"),parsir(scenarioTemplates,this.wrap,this),scenarioTemplates.drawing.dom.appendChild(this.DOMObject),this.wrap.className="scenario-wrap",this.editorContext={modes:{pastObject:function(e,t){t.fps=10,t.editorContext.checkedObject&&(t.editorContext.checkedObject.x=e.layerX,t.editorContext.checkedObject.y=e.layerY,t.editorContext.checkedObject.start())}}},this.editorContext.mode=this.editorContext.modes.pastObject,this.DOMObject.scene=this,this.DOMObject.onclick=function(e){this.scene.editorContext.mode(e,this.scene)}}function getSceneStructure(e){var t=arguments[1]||e.stack.getObjectsMap(),n={};for(var s in t)n[s]={attributes:{"data-id":s},properties:{innerHTML:s}},n[s].childs=getSceneStructure(e,t[s]);return arguments[1]?n:parsir(n,!1,e)}function dragHor(e){console.log("Yep!"),console.log(e)}function rDragHor(e,t){console.log("Wooops!"),console.log(t)}function ParsirText(e){this.type="span",this.properties=e.props||{},this.properties.innerHTML=e.text||""}function ParsirInput(e){this.type="input",this.properties=e.props||{},this.properties.value=e.value||"",this.properties.placeholder=e.placeholder||"",this.events=e.events||{}}function ParsirButton(e,t){this.type="button",this.properties=e.props||{},this.childs=e.childs,this.events=e.events||{},this.events.click=t||this.events.click||function(){}}var scenarioFunctions={instruments:{},hello:function(){console.log("Hello, World!")}};Scene.prototype=Object.create(Drawing.prototype),PropertyListing.prototype.append=function(e){this.list[e.id]=e;this.up(this.parent,e);var t=scenarioTemplates.objectManager.childs.list.dom;return t.innerHTML="",t.appendChild(getSceneStructure(e.drawing)),this.up(this.parent,e)},PropertyListing.prototype.remove=function(e){delete this.list[e],this.rem(this.parent)};var scenarioTemplates={topMenu:{properties:{className:"scenario-topMenu"},childs:{fpsInput:new ParsirInput({placeholder:"fps",props:{type:"number"},events:{change:function(){+this.value<0&&(this.value=0)}}}),collapseInterfaceButton:new ParsirButton({innerHTML:"-",props:{className:"collapse"}},function(){console.log("collapse")})}},props:{properties:{className:"scenario-properties"},childs:{x:new ParsirInput({placeholder:"x",props:{type:"number"},events:{change:function(){isNotNegativeNumber(this.value)||(this.value=0),this.scene.editorContext.checkedObject.x=this.value}}}),y:new ParsirInput({placeholder:"y",props:{type:"number"},events:{change:function(){isNotNegativeNumber(this.value)||(this.value=0),this.scene.editorContext.checkedObject.y=this.value}}}),radius:new ParsirInput({placeholder:"radius",props:{type:"number"},events:{change:function(){isNotNegativeNumber(this.value)||(this.value=0),this.scene.editorContext.checkedObject.now.radius=this.value}}}),radian:new ParsirInput({placeholder:"radian",props:{type:"number"},events:{change:function(){"number"!=typeof+this.value&&(this.value=0),this.scene.editorContext.checkedObject.radian=this.value}}}),fill:new ParsirInput({placeholder:"fill",props:{type:"text"},events:{change:function(){isColor(this.value)&&(this.scene.editorContext.checkedObject.now.fill=this.value)}}}),collapseInterfaceButton:new ParsirButton({innerHTML:"-",props:{className:"collapse"}},function(){console.log("collapse")})}},instruments:{properties:{className:"scenario-instruments"},childs:{arrow:new ParsirButton({props:{className:"button arrow",innerHTML:"ARR"}},function(){console.log("instruments button")}),checkpoints:new ParsirButton({props:{className:"button points",innerHTML:"CHCK"}},function(){console.log("instruments button")}),polygon:new ParsirButton({props:{className:"button polygon",innerHTML:"POLY"}},function(){this.scene.editorContext.checkedObject=new Polygon({drawing:this.scene,sidesCount:6,settings:{radius:30,fill:"#000000"}}),this.scene.editorContext.mode=this.scene.editorContext.modes.pastObject}),circle:new ParsirButton({props:{className:"button circle",innerHTML:"CLE"}},function(){this.scene.editorContext.checkedObject=new Circle({drawing:this.scene,radius:30,settings:{fill:"#000000"}}),this.scene.editorContext.mode=this.scene.editorContext.modes.pastObject}),line:new ParsirButton({props:{className:"button line",innerHTML:"LINE"}},function(){this.scene.editorContext.checkedObject=new Line,this.scene.editorContext.mode=this.scene.editorContext.modes.pastObject}),curve:new ParsirButton({props:{className:"button curve",innerHTML:"CRV"}},function(){this.scene.editorContext.checkedObject=new Curve,this.scene.editorContext.mode=this.scene.editorContext.modes.pastObject}),fill:new ParsirButton({props:{className:"button fill",innerHTML:"FILL"}},function(){console.log("instruments button")}),stroke:new ParsirButton({props:{className:"button stroke",innerHTML:"STRK"}},function(){console.log("instruments button")})}},drawing:{properties:{className:"scenario-drawing"}},objectManager:{properties:{className:"scenario-objectManager"},childs:{description:{properties:{className:"topMenu"},childs:{text:new ParsirText({text:"objects list"}),collapseButton:new ParsirButton({innerHTML:"-",props:{className:"collapse"}},function(){console.log("collapse")})}},list:{},manager:{childs:{append:{},clone:{},delete:{}}}}},sceneManager:{properties:{className:"scenario-sceneManager"},childs:["plaingLine","managerPlane"]}};